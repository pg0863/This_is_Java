- 클래스의 구성 멤버 -
필드 / 생성자 / 메소드 / 인스턴스 멤버와 this / 정적 멤버와 static /
final 필드와 상수(static final) / 패키지 / 접근 제한자 / Getter와 Setter / 어노테이션

객체 ; 필드(속성) + 메소드(동작)
ex) 자동차 객체 ; 속도 + 달린다

객체 지향 프로그래밍의 특징 (캡슐화, 상속, 다형석)
- 캡슐화 : 객체의 필드,메소드를 하나로 묶고 실제 구현 내용은 감춰짐.
- 상속 : 부모가 가진 필드와 메소드를 자식 객체가 사용할 수 있음.
- 다형성 : 같은 타입이지만 실행 결과가 다양한 객체를 대입할 수 있는 성질
ex) 자동차 타이어 타입 - 금호 타이어 객체 / 한국 타이어 객체

객체와 클래스
- 클래스에는 객체를 생성하기 위한 필드와 메소드가 정의되어 있다.
- 인스턴스 : 클래스로부터 만들어진 하나의 객체
- 하나의 클래스로부터 여러 개의 인스턴스를 만들 수 있다.
ex) 클래스(자동차 설계도) - 페라리 인스턴스 / 제네시스 인스턴스 / ~

클래스의 이름
- 하나 이상의 문자, 첫째 글자 숫자X, '$'와 '_' 외 특수 문자 사용 불가. 자바 키워드 불가.
- 알파벳 대소문자는 다른 문자로 인식. 

클래스 선언과 컴파일
- new 연산자 : 객체를 생성하는 역할, 객체 생성 후 객체 생성 번지를 리턴.
- 클래스 변수 : new 연산자에 의해 리턴된 객체의 번지를 저장하는 변수(참조 타입), 힙 영역의 객체를 사용하기 위해 사용됨.

클래스의 용도
- 라이브러리(API:Application Program Interface)용 : 자체 실행X, 다른 클래스에서 이용할 목적으로 만든 클래스.
- 실행용 : main() 메소드를 가지고 있는 클래스로 실행할 목적으로 만든 클래스.

1개의 어플리케이션 = [1개의 실행 클래스] + [n개의 라이브러리 클래스]

5절. 클래스의 구성 멤버 (필드, 생성자(Constructor), 메소드(Method))
- 필드 : 객체의 데이터가 저장되는 곳
- 생성자 : 객체 생성시 초기화 역할 담당
- 메소드 : 객체의 동작에 해당하는 실행 블록

~

9절. 인스턴스 멤버와 this

this : 객체(인스턴스) 자신의 참조(번지)를 가지고 있는 키워드.
객체 내부에서 인스턴스 멤버임을 명확히 하기 위해 this.을 붙일 수 있다.
주로 매개변수와 필드명이 동일할 경우 인스턴스 필드임을 구분하기 위해 붙임.

10절. 정적(static) 멤버와 static
정적 멤버 : 클래스에 고정된 필드와 메소드(정적 필드, 정적 메소드).
정적 멤버는 클래스에 소속된 멤버로 객체 내부에 존재하지 않고, 메소드 영역에 존재한다.
★ 정적 멤버는 객체를 생성하지 않고 클래스로 바로 접근해서 사용한다.
정적 멤버 사용 -> 클래스 이름과 함께 도트(.) 연산자로 접근할 수 있다.
ex)
public class Calculator { static double pi = 3.14; }
double result1 = 10 * 10 * Calculator.pi; 

필드?
(인스턴스 멤버는 객체에 소속, 정적 멤버는 클래스에 고정!)
(객체마다 따로 가지고 있어야 할 데이터 -> 인스턴스 필드 / 공용 데이터 -> 정적 필드)
메소드?
(인스턴스 필드로 작업해야 할 메소드 -> 인스턴스 메소드)
(인스턴스 필드로 작업하지 않는 메소드 -> 정적 메소드)

정적 초기화 블록
- 클래스가 메소드 영역으로 로딩될 때 자동으로 실행하는 블록.
- 정적 필드의 복잡한 초기화 작업과 정적 메소드를 호출할 수 있다.
- 클래스 내부에 여러 개가 선언되어도 상관 없다. 선언 순서로 실행된다. 

10절. 정적 멤버와 static
* 싱글톤(Singleton)
: 하나의 어플리케이션 내에서 단 하나만 생성되는 객체를 말한다.
싱글톤을 만드는 방법
- 외부에서 new 연산자로 생성자를 호출할 수 없도록 막는다
  (private 접근 제한자를 생성자 앞에 붙임)
- 클래스 자신의 타입으로 정적 필드를 선언하고, 자신의 객체를 생성해 초기화한다.
  (private 접근 제한자를 붙여 외부에서 필드값을 변경할 수 없도록 막는다.)
- 외부에서 호출할 수 있는 정적 메소드인 getInstance()를 선언한다.
  (정적 필드에서 참조하고 있는 자신의 객체를 리턴하도록 한다.

public class 클래스 {
  // 정적 필드
  private static 클래스 singleton = new 클래스();
  // 생성자
  private 클래스 () {}
  // 정적 메소드
  static 클래스 getInstance() {
    return singleton;
}

final 필드?
최종적인 값을 갖고 있는 필드 = 값을 변경할 수 없는 필드
final 필드의 딱 한번의 초기값 지정 방법
- 필드 선언시 / - 생성자
public class Person {
  final String nation = "Korea";
  final String ssn; // 선언만 해놓고 후에 값 할당하면 이후 변경 불가.
  String name;

  public Person(String ssn, String name) {
    this.ssn = ssn; // final 변수이므로 이후 수정 불가.
    this.name = name;
  }
}

11절. final 필드와 상수
상수(static final) = 정적 final 필드
- 객체마다 가지고 있지 않고, 메소드 영역에 클래스별로 관리되는 불변의 정적 필드
- 공용 데이터로서 사용

상수 선언과 초기화
상수 이름은 전부 대문자로 작성하는 것이 관례
다른 단어가 결합되면 _로 연결하는 것이 관례
초기화 방법 2가지->
static final double EARTH_RADIUS = 6400;
static final double EARTH_SURFACE_AREA;
static { EARTH_SURFACE_AREA = 4 * Math.PI * EARTH_RADIUS * EARTH_RADIUS; }

12절. 패키지(package)
패키지란? 클래스를 기능별로 묶어서 그룹 이름을 붙여 놓은 것.
- 파일들을 관리하기 위해 사용하는 폴더(디렉토리)와 비슷한 개념.
- 패키지의 물리적인 형태는 파일 시스템의 폴더이다.
- 패키지는 클래스 이름의 일부이다.
- 전체 클래스 이름 = 상위패키지.하위패키지.클래스
- 클래스명이 같아도 패키지명이 다르면 다른 클래스로 취급한다.
- 클래스를 선언할 떄 포함될 패키지를 선언해야 한다.
- 클래스 파일은(~.class) 선언된 패키지와 동일한 폴더 안에서만 동작한다.

패키지 선언.
- 패키지 선언은 클래스 선언 첫 줄에 해야 한다.
- 상위 패키지와 하위 패키지는 도트(.)로 구분한다.

패키지 이름 규칙
- 전부 알파벳 소문자로 작성하는 것이 관례이다.
- 숫자로 시작해서는 안 된다.
- '_' , '$' 를 제외한 특수 문자를 사용해서는 안 된다.
- 회사 도메인의 역순으로 패키지 이름을 보통 만든다.
ex) com.naver.projectname
    com.kakao.projectname
    org.apache.projectname

패키지 선언이 포함된 클래스 컴파일
명령 라인에서 컴파일 할 경우?
javac XXX.java 
 -> 바이트 코드 파일(~.class)만 생성되므로 패키지별로 폴더를 직접 만들어 바이트 코드 파일을 저장하고 사용해야 함.
javac -d [패키지가 생성될 경로] XXX.java
-> 패키지 폴더가 자동으로 생성된다.

패키지 선언이 포함된 클래스 실행
- 상위(루트) 패키지가 시작하는 곳에서 실행해야 한다.
- javac 상위패키지.하위패키지.클래스

import문
- 패키지 내에 같이 포함된 클래스간에는 클래스 이름으로 사용 가능.
- 패키지가 다른 클래스를 사용해야 할 경우, 2가지 방법.
1. 패키지명이 포함된 전체 클래스 이름으로 사용
package com.mycompnay;
public class Car {
  com.hankook.Tire tire = new com.hankook.Tire(); // 패키지명 포함된 클래스 이름으로 사용.
}
2. import문으로 패키지를 지정하고 사용.
package com.mycompany;
import com.hankook.Tire; // import 문으로 패키지 지정
public class Car {
  Tire tire = new Tire();

13절. 접근 제한자(Access Modifier)
- 클래스 및 클래스의 구성 멤버에 대한 접근을 제한하는 역할을 한다.
다른 패키지에서 클래스를 사용하지 못하도록 막는다(클래스 제한)
클래스로부터 객체를 생성하지 못하도록 막는다(생성자 제한)
특정 필드와 메소드를 숨김 처리한다(필드와 메소드 제한)
- protected와 private은 클래스 앞에 붙일 수 없음.
public : 모두 접근 가능.
protected : 자식 클래스가 아닌 다른 패키지에 소속된 클래스 접근 불가.
default : 다른 패키지에 소속된 클래스 접근 불가.
private : 모든 외부 클래스 접근 불가.

14절. Getter와 Setter
클래스를 선언할 떄 필드는 일반적으로 private 접근 제한을 한다.
- 읽기 전용 필드가 있을 수 있다. (Getter의 필요성)
- 외부에서 엉뚱한 값으로 변경할 수 없도록 한다. (Setter의 필요성)
  (Setter 내에 if문을 통해 유효성 검사를 하는 방법 등)
- 이클립스 [Source] - Generate Getters and Setters 클릭시 필드별 자동 생성.

Getter
- private 필드의 값을 리턴하는 역할을 한다.
- getFieldName() 또는 isFieldName() 메소드를 말한다.
  (필드타입이 boolean일 경우 isFieldName())

Setter
- 외부에서 주어진 값을 필드값으로 수정한다.
- setFieldName(타입 변수) 메소드를 말한다.

15절. 어노테이션(Annotation)
어노테이션이란? 프로그램에게 추가적인 정보를 제공해주는 메타데이터(metadata)이다.
어노테이션 용도
- 컴파일러에게 코드 작성 문법 에러를 체크하도록 정보를 제공.
  (메소드가 재정의 되었는지 확인 (@Override))
- 소프트웨어 개발 툴이 빌드나 배치시 코드를 자동으로 생성할 수 있도록 정보를 제공.
  (XML 설정 파일을 자동 생성하거나 배포를 위한 JAR 압축 파일을 자동 생성 등)
- 실행(런타임)시 특정 기능을 실행하도록 정보를 제공.
  (객체가 어플리케이션 내부에서 해야 할 역할을 정의할 수 있다(서블릿, 컨트롤러, ~))

어노테이션 타입 정의와 적용
어노테이션 타입 정의
- 소스 파일 생성 : AnnotationinNamejava
- 소스 파일 내용

어노테이션의 엘리멘트(element) 멤버
- 어노테이션을 코드에 적용할 때 외부의 값을 입력받을 수 있도록 하는 역할
public @interface AnnotationName {
  String elementName1();  // 엘리먼트 선언
  int elementName2() default 5;
}
- 어노테이션 적용시 엘리먼트 값을 지정하는 방법
@AnnotationName(elementName1 = 값, elementName2 = 3); // 또는
@AnnotationName(elementName1="값");

어노테이션 타입 적용
- @AnnotationName
- @Override
  public void toString() {...}

어노테이션을 적용할 때 엘리먼트가 하나만 있으면 엘리먼트명 생략가능
@AnnotationName("값");
두 개 이상의 속성을 기술할 떄에는 value=값 형태로 기술
@AnnotationName(value="값", elementName=3);

어노테이션 적용 대상
- 코드 상에서 어노테이션을 적용할 수 있는 대상
- java.lang.annotation.ElementType 열거 상수로 정의되어 있음
ElementType 열거 상수	적용 대상
TYPE			클래스, 인터페이스, 열거 타입
ANNOTATION_TYPE	어노테이션
FIELD			필드
CONSTRUCTOR		생성자
METHOD			메소드
LOCAL_VARIABLE		로컬 변수
PACKAGE			패키지
@Target({ElementType.Type, ElementType.FIELD, ElementType,METHOD})

어노테이션 유지 정책
- 어노테이션 적용 코드가 유지되는 시점을 지정하는 것
- java.lang.annotation.RetentionPolicy 열거 상수로 정의되어 있음.
RetentionPolicy 열거 상수 / 설명
SOURCE / 소스상에서만 어노테이션 정보를 유지. 소스 코드 분석시 의미가 있으며 바이트 코드 파일에는 정보가 남지 않음.
CLASS / 바이트 코드 파일까지 어노테이션 정보를 유지. 리플렉션을 이용해서 어노테이션 정보(엘르먼트 값)를 얻을 수는 없다.
RUNTIME / 바이트 코드 파일까지 어노테이션 정보를 유지하면서 리플렉션을 이용해서 런타임에 어노테이션 정보를 얻을 수 있다.
* 리플렉션(Reflection) : 런타임에 클래스의 메타 정보를 얻는 기능.
- 클래스가 가지고 있는 필드, 생성자, 메소드, 어노테이션의 정보를 얻을 수 있다.
- 런타임시에 어노테이션 정보를 얻으려면 유지 정책을 RUNTIME으로 설정해야 함.

- 유지 정책 지정 방법
@Retention 어노테이션으로 유지 정책을 지정
@Retention의 기본 엘리먼트인 value의 타입은 RetentionPolicy
ex)
@Target({ElementType.Type, ElementType.FIELD, ElementType,METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface AnnotationName {
}

@런타임시에 어노테이션 정보 사용하기
- 클래스에 적용된 어노테이션 정보 얻기 
- 필드, 생성자, 메소드에 적용된 어노테이션
 클래스.class의 다음 메소드를 이용해서
 java.lang.reflect 패키지의 Field, Constructor, Method 클래스의 배열을 알아 냄.
리턴타입 / 메소드명 / 설명
Field[] / getFields() / 필드 정보를 Field 배열로 리턴
Constructor[] / getConstructors() / 생성자 정보를 Constructor 배열로 리턴
Method[] / getDeclaredMethods() / 메소드 정보를 Method 배열로 리턴

어노테이션 정보를 얻기 위한 메소드
리턴타입 / 메소드명
boolean / isAnnotationPresent(Class<? extends Annotation> annotationClass)
지정한 어노테이션이 적용되었는지 여부. Class에서 호출했을 경우, 상위 클래스에 적용된 경우도 true 리턴.
Annotation / getAnnotation(Class<T> annotationClass)
지정한 어노테이션이 적용되어있으면 어노테이션을, 그렇지 않으면 null을 리턴. 클래스에서 호출했을 경우 상위 클래스에 적용된 경우도 어노테이션 리턴.
Annotation[] / getAnnotations()
적용된 모든 어노테이션 리턴. 클래스 호출 경우 상위 클래스 적용 어노테이션 모두 포함. 적용된 어노테이션 없을 경우 길이가 0인 배열 리턴.
Annotation[] getDeclaredAnnotations()
직접 적용된 모든 어노테이션을 리턴. Class에서 호출했을 경우 상위 클래스에 적용된 어노테이션은 포함하지 않는다.
