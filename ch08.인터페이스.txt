1절. 인터페이스의 역할
인터페이스 : 개발 코드와 객체가 서로 통신하는 접점이다.
개발 코드는 객체의 내부 구조를 알 필요가 없고 인터페이스의 메소드만 알고 있으면 된다.
인터페이스의 역할
- 개발 코드가 객체에 종속되지 않게 하여 객체를 교체할 수 있도록 하는 역할을 한다.
- 개발 코드 변경 없이 리턴값 또는 실행 내용이 다양해질 수 있다(다형성).

2절. 인터페이스의 선언
- 인터페이스의 이름
 자바 식별자 작성 규칙에 따라 작성
- 소스 파일 생성 : 인터페이스 이름과 대소문자가 동일한 소스 파일을 생성
- 인터페이스 선언
 [접근 제한자] interface [인터페이스명] { ... }
- 인터페이스의 구성 멤버 : 상수/추상메소드/default타입 메소드/static타입 메소드
(인터페이스에 선언되는 모든 상수는 static final의 특성을 가진다! 
 / 선언시 초기값을 설정해야 함.

상수 필드(Constant Field)
인터페이스는 객체 사용 설명서이므로 런타임 시 데이터를 저장할 수 있는 필드를 선언할 수 없다. 그러나 상수 필드는 선언이 가능하다. 상수는 인터페이스에 고정된 값으로 런타임 시에 데이터를 바꿀 수 없다. 상수를 선언할 때에는 반드시 초기값을 대입해야 한다.

추상 메소드(Abstract Method)
인터페이스의 메소드는 기본적으로 실행 블록이 없는 추상 메소드로 선언한다.

디폴드 메소드(Default Method)
디폴드 메소드는 인터페이스에 선언되지만 사실은 객체가 가지고 있는 인스턴스 메소드라고 생각해야 한다. 자바 8에서 디폴드 메소드를 허용한 이유는 기존 인터페이스를 확장해서 새로운 기능을 추가하기 위해서이다.
[public] default 리턴타입 메소드면(매개변수, ...) {...}
- default를 반드시 붙여야 한다.
- 기본적으로 public 접근 제한을 가진다. 
- 실행 블록을 가진다!

정적 메소드(Static Method)
자바 8에서 추가된 인터페이스의 새로운 멤버이다.
[public] static 리턴타입 메소드명(매개변수, ...) {...}
- 기본적으로 public 접근 제한을 가진다.
- 실행 블록을 가진다.

3절. 인터페이스 구현
구현 객체와 구현 클래스
- 인터페이스의 추상 메소드에 대한 실체 메소드를 가진 객체 = 구현 객체
- 구현 객체를 생성하는 클래스 = 구현 클래스
구현 클래스 선언
- 자신의 객체가 인터페이스 타입으로 사용할 수 있음을 implements 키워드로 명시
public class 구현클래스명 implements 인터페이스명 {
    // 인터페이스에 선언된 추상 메소드의 실체 메소드 선언 및 실행블록 작성.
}

추상 메소드의 실체 메소드를 작성하는 방법
- 메소드의 선언부가 정확히 일치해야 한다.
- 인터페이스의 모든 추상 메소드를 재정의하는 실체 메소드를 작성해야 한다.
- public보다 더 낮은 접근 제한으로 작성할 수 없다.
- 이클립스의 자동 생성 기능을 이용할 수 있다.
- @Override 어노테이션을 이용해 정확히 재정의되었는지 컴파일러가 체크할 수 있다.

3절. 인터페이스 구현
인터페이스 변수와 구현 객체
인터페이스를 사용하지 않은 경우 : Television tv = new Television();
인터페이스를 사용한 경우
[인터페이스명] [변수] = 구현객체;
[인터페이스명] [변수];
[변수] = 구현객체;
=> 
RemoteControl rc;
rc = new Television();
rc = new Audio();

익명 구현 객체
- 명시적인 구현 클래스 작성을 생략하고 바로 구현 객체를 얻는 방법
 (이름이 없는 구현 클래스 선언과 동시에 객체를 생성한다)
 [인터페이스] [변수] = new 인터페이스(){ 
   //인터페이스에 선언된 추상 메소드의 실체 메소드 선언
 };
 인터페이스의 추상 메소드들을 모두 재정의하는 실체 메소드가 있어야 한다.
 추가적으로 필드와 메소드를 선언할 수 있지만 익명 객체 안에서만 사용 가능하고, 
 인터페이스 변수로 접근할 수 없다.
- 주로 사용되는 곳 : UI 프로그래밍(Swing, Android)에서 이벤트 처리를 위해 주로 사용.
 임시 작업 스레드를 만들기 위해 사용.
 자바8부터 지원하는 람다식은 내부적으로 익명 구현 객체를 사용.
- 익명 구현 객체도 클래스(바이트코드) 파일을 가지고 있다.
 클래스$번호.class 파일명으로 생성된다.
 (익명 구현 객체의 수에 맞게 번호가 올라간다) 

다중 인터페이스 구현
public class 구현클래스명 implements 인터페이스 A, 인터페이스 B {
  // 인터페이스 A에 선언된 추상 메소드의 실체 메소드 선언
  // 인터페이스 B에 선언된 추상 메소드의 실체 메소드 선언
}

4절. 인터페이스 사용
인터페이스에 구현 객체를 대입하는 방법
public class MyClass {
  //필드
  RemoteControl rc = new Television();

★//생성자
  MyClass(RemoteControl rc){
    this.rc = rc;
  }

  //메소드
  void methodA(){
    //로컬 변수
    RemoteControl rc = new Audio();
  }

★void methodB(RemoteControl rc){...}
}

